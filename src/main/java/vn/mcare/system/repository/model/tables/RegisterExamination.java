/*
 * This file is generated by jOOQ.
 */
package vn.mcare.system.repository.model.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import vn.mcare.system.repository.model.Keys;
import vn.mcare.system.repository.model.ThangvtmMcare;
import vn.mcare.system.repository.model.tables.records.RegisterExaminationRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RegisterExamination extends TableImpl<RegisterExaminationRecord> {

    private static final long serialVersionUID = 1923335635;

    /**
     * The reference instance of <code>thangvtm_mcare.register_examination</code>
     */
    public static final RegisterExamination REGISTER_EXAMINATION = new RegisterExamination();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RegisterExaminationRecord> getRecordType() {
        return RegisterExaminationRecord.class;
    }

    /**
     * The column <code>thangvtm_mcare.register_examination.id</code>.
     */
    public final TableField<RegisterExaminationRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>thangvtm_mcare.register_examination.random_number</code>.
     */
    public final TableField<RegisterExaminationRecord, String> RANDOM_NUMBER = createField(DSL.name("random_number"), org.jooq.impl.SQLDataType.CHAR(3).nullable(false), this, "");

    /**
     * The column <code>thangvtm_mcare.register_examination.full_name</code>.
     */
    public final TableField<RegisterExaminationRecord, String> FULL_NAME = createField(DSL.name("full_name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>thangvtm_mcare.register_examination.status</code>.
     */
    public final TableField<RegisterExaminationRecord, Integer> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>thangvtm_mcare.register_examination.email</code>.
     */
    public final TableField<RegisterExaminationRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>thangvtm_mcare.register_examination.phone</code>.
     */
    public final TableField<RegisterExaminationRecord, String> PHONE = createField(DSL.name("phone"), org.jooq.impl.SQLDataType.CHAR(10).nullable(false), this, "");

    /**
     * The column <code>thangvtm_mcare.register_examination.from_date</code>.
     */
    public final TableField<RegisterExaminationRecord, LocalDateTime> FROM_DATE = createField(DSL.name("from_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>thangvtm_mcare.register_examination.to_date</code>.
     */
    public final TableField<RegisterExaminationRecord, LocalDateTime> TO_DATE = createField(DSL.name("to_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>thangvtm_mcare.register_examination.created_at</code>.
     */
    public final TableField<RegisterExaminationRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>thangvtm_mcare.register_examination.modified_at</code>.
     */
    public final TableField<RegisterExaminationRecord, LocalDateTime> MODIFIED_AT = createField(DSL.name("modified_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>thangvtm_mcare.register_examination</code> table reference
     */
    public RegisterExamination() {
        this(DSL.name("register_examination"), null);
    }

    /**
     * Create an aliased <code>thangvtm_mcare.register_examination</code> table reference
     */
    public RegisterExamination(String alias) {
        this(DSL.name(alias), REGISTER_EXAMINATION);
    }

    /**
     * Create an aliased <code>thangvtm_mcare.register_examination</code> table reference
     */
    public RegisterExamination(Name alias) {
        this(alias, REGISTER_EXAMINATION);
    }

    private RegisterExamination(Name alias, Table<RegisterExaminationRecord> aliased) {
        this(alias, aliased, null);
    }

    private RegisterExamination(Name alias, Table<RegisterExaminationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> RegisterExamination(Table<O> child, ForeignKey<O, RegisterExaminationRecord> key) {
        super(child, key, REGISTER_EXAMINATION);
    }

    @Override
    public Schema getSchema() {
        return ThangvtmMcare.THANGVTM_MCARE;
    }

    @Override
    public Identity<RegisterExaminationRecord, Integer> getIdentity() {
        return Keys.IDENTITY_REGISTER_EXAMINATION;
    }

    @Override
    public UniqueKey<RegisterExaminationRecord> getPrimaryKey() {
        return Keys.KEY_REGISTER_EXAMINATION_PRIMARY;
    }

    @Override
    public List<UniqueKey<RegisterExaminationRecord>> getKeys() {
        return Arrays.<UniqueKey<RegisterExaminationRecord>>asList(Keys.KEY_REGISTER_EXAMINATION_PRIMARY);
    }

    @Override
    public RegisterExamination as(String alias) {
        return new RegisterExamination(DSL.name(alias), this);
    }

    @Override
    public RegisterExamination as(Name alias) {
        return new RegisterExamination(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RegisterExamination rename(String name) {
        return new RegisterExamination(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RegisterExamination rename(Name name) {
        return new RegisterExamination(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, Integer, String, String, LocalDateTime, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
