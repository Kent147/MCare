/*
 * This file is generated by jOOQ.
 */
package vn.mcare.system.repository.model.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import vn.mcare.system.repository.model.Keys;
import vn.mcare.system.repository.model.ThangvtmMcare;
import vn.mcare.system.repository.model.tables.records.MedicalHistoryRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MedicalHistory extends TableImpl<MedicalHistoryRecord> {

    private static final long serialVersionUID = -1093867421;

    /**
     * The reference instance of <code>thangvtm_mcare.medical_history</code>
     */
    public static final MedicalHistory MEDICAL_HISTORY = new MedicalHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MedicalHistoryRecord> getRecordType() {
        return MedicalHistoryRecord.class;
    }

    /**
     * The column <code>thangvtm_mcare.medical_history.id</code>.
     */
    public final TableField<MedicalHistoryRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>thangvtm_mcare.medical_history.examine_id</code>.
     */
    public final TableField<MedicalHistoryRecord, String> EXAMINE_ID = createField(DSL.name("examine_id"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>thangvtm_mcare.medical_history.pathological</code>.
     */
    public final TableField<MedicalHistoryRecord, String> PATHOLOGICAL = createField(DSL.name("pathological"), org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>thangvtm_mcare.medical_history.status</code>.
     */
    public final TableField<MedicalHistoryRecord, Integer> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>thangvtm_mcare.medical_history.note</code>.
     */
    public final TableField<MedicalHistoryRecord, String> NOTE = createField(DSL.name("note"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>thangvtm_mcare.medical_history.created_at</code>.
     */
    public final TableField<MedicalHistoryRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>thangvtm_mcare.medical_history.modified_at</code>.
     */
    public final TableField<MedicalHistoryRecord, LocalDateTime> MODIFIED_AT = createField(DSL.name("modified_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>thangvtm_mcare.medical_history</code> table reference
     */
    public MedicalHistory() {
        this(DSL.name("medical_history"), null);
    }

    /**
     * Create an aliased <code>thangvtm_mcare.medical_history</code> table reference
     */
    public MedicalHistory(String alias) {
        this(DSL.name(alias), MEDICAL_HISTORY);
    }

    /**
     * Create an aliased <code>thangvtm_mcare.medical_history</code> table reference
     */
    public MedicalHistory(Name alias) {
        this(alias, MEDICAL_HISTORY);
    }

    private MedicalHistory(Name alias, Table<MedicalHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private MedicalHistory(Name alias, Table<MedicalHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> MedicalHistory(Table<O> child, ForeignKey<O, MedicalHistoryRecord> key) {
        super(child, key, MEDICAL_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return ThangvtmMcare.THANGVTM_MCARE;
    }

    @Override
    public Identity<MedicalHistoryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MEDICAL_HISTORY;
    }

    @Override
    public UniqueKey<MedicalHistoryRecord> getPrimaryKey() {
        return Keys.KEY_MEDICAL_HISTORY_PRIMARY;
    }

    @Override
    public List<UniqueKey<MedicalHistoryRecord>> getKeys() {
        return Arrays.<UniqueKey<MedicalHistoryRecord>>asList(Keys.KEY_MEDICAL_HISTORY_PRIMARY);
    }

    @Override
    public MedicalHistory as(String alias) {
        return new MedicalHistory(DSL.name(alias), this);
    }

    @Override
    public MedicalHistory as(Name alias) {
        return new MedicalHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MedicalHistory rename(String name) {
        return new MedicalHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MedicalHistory rename(Name name) {
        return new MedicalHistory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, Integer, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
