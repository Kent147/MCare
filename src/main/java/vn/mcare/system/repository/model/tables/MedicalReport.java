/*
 * This file is generated by jOOQ.
 */
package vn.mcare.system.repository.model.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import vn.mcare.system.repository.model.Keys;
import vn.mcare.system.repository.model.ThangvtmMcare;
import vn.mcare.system.repository.model.tables.records.MedicalReportRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MedicalReport extends TableImpl<MedicalReportRecord> {

    private static final long serialVersionUID = 1767580749;

    /**
     * The reference instance of <code>thangvtm_mcare.medical_report</code>
     */
    public static final MedicalReport MEDICAL_REPORT = new MedicalReport();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MedicalReportRecord> getRecordType() {
        return MedicalReportRecord.class;
    }

    /**
     * The column <code>thangvtm_mcare.medical_report.medical_report_id</code>.
     */
    public final TableField<MedicalReportRecord, String> MEDICAL_REPORT_ID = createField(DSL.name("medical_report_id"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>thangvtm_mcare.medical_report.cif</code>.
     */
    public final TableField<MedicalReportRecord, String> CIF = createField(DSL.name("cif"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>thangvtm_mcare.medical_report.blood_group</code>.
     */
    public final TableField<MedicalReportRecord, Integer> BLOOD_GROUP = createField(DSL.name("blood_group"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>thangvtm_mcare.medical_report.created_at</code>.
     */
    public final TableField<MedicalReportRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>thangvtm_mcare.medical_report.modified_at</code>.
     */
    public final TableField<MedicalReportRecord, LocalDateTime> MODIFIED_AT = createField(DSL.name("modified_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>thangvtm_mcare.medical_report</code> table reference
     */
    public MedicalReport() {
        this(DSL.name("medical_report"), null);
    }

    /**
     * Create an aliased <code>thangvtm_mcare.medical_report</code> table reference
     */
    public MedicalReport(String alias) {
        this(DSL.name(alias), MEDICAL_REPORT);
    }

    /**
     * Create an aliased <code>thangvtm_mcare.medical_report</code> table reference
     */
    public MedicalReport(Name alias) {
        this(alias, MEDICAL_REPORT);
    }

    private MedicalReport(Name alias, Table<MedicalReportRecord> aliased) {
        this(alias, aliased, null);
    }

    private MedicalReport(Name alias, Table<MedicalReportRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> MedicalReport(Table<O> child, ForeignKey<O, MedicalReportRecord> key) {
        super(child, key, MEDICAL_REPORT);
    }

    @Override
    public Schema getSchema() {
        return ThangvtmMcare.THANGVTM_MCARE;
    }

    @Override
    public UniqueKey<MedicalReportRecord> getPrimaryKey() {
        return Keys.KEY_MEDICAL_REPORT_PRIMARY;
    }

    @Override
    public List<UniqueKey<MedicalReportRecord>> getKeys() {
        return Arrays.<UniqueKey<MedicalReportRecord>>asList(Keys.KEY_MEDICAL_REPORT_PRIMARY);
    }

    @Override
    public MedicalReport as(String alias) {
        return new MedicalReport(DSL.name(alias), this);
    }

    @Override
    public MedicalReport as(Name alias) {
        return new MedicalReport(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MedicalReport rename(String name) {
        return new MedicalReport(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MedicalReport rename(Name name) {
        return new MedicalReport(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
