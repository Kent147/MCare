/*
 * This file is generated by jOOQ.
 */
package vn.mcare.system.repository.model.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import vn.mcare.system.repository.model.Keys;
import vn.mcare.system.repository.model.ThangvtmMcare;
import vn.mcare.system.repository.model.tables.records.WardRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ward extends TableImpl<WardRecord> {

    private static final long serialVersionUID = -1697044185;

    /**
     * The reference instance of <code>thangvtm_mcare.ward</code>
     */
    public static final Ward WARD = new Ward();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WardRecord> getRecordType() {
        return WardRecord.class;
    }

    /**
     * The column <code>thangvtm_mcare.ward.id</code>.
     */
    public final TableField<WardRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>thangvtm_mcare.ward.name</code>.
     */
    public final TableField<WardRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>thangvtm_mcare.ward.prefix</code>.
     */
    public final TableField<WardRecord, String> PREFIX = createField(DSL.name("prefix"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>thangvtm_mcare.ward.district_id</code>.
     */
    public final TableField<WardRecord, Integer> DISTRICT_ID = createField(DSL.name("district_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>thangvtm_mcare.ward</code> table reference
     */
    public Ward() {
        this(DSL.name("ward"), null);
    }

    /**
     * Create an aliased <code>thangvtm_mcare.ward</code> table reference
     */
    public Ward(String alias) {
        this(DSL.name(alias), WARD);
    }

    /**
     * Create an aliased <code>thangvtm_mcare.ward</code> table reference
     */
    public Ward(Name alias) {
        this(alias, WARD);
    }

    private Ward(Name alias, Table<WardRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ward(Name alias, Table<WardRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Ward(Table<O> child, ForeignKey<O, WardRecord> key) {
        super(child, key, WARD);
    }

    @Override
    public Schema getSchema() {
        return ThangvtmMcare.THANGVTM_MCARE;
    }

    @Override
    public UniqueKey<WardRecord> getPrimaryKey() {
        return Keys.KEY_WARD_PRIMARY;
    }

    @Override
    public List<UniqueKey<WardRecord>> getKeys() {
        return Arrays.<UniqueKey<WardRecord>>asList(Keys.KEY_WARD_PRIMARY);
    }

    @Override
    public Ward as(String alias) {
        return new Ward(DSL.name(alias), this);
    }

    @Override
    public Ward as(Name alias) {
        return new Ward(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ward rename(String name) {
        return new Ward(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ward rename(Name name) {
        return new Ward(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
