/*
 * This file is generated by jOOQ.
 */
package vn.mcare.system.repository.model.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import vn.mcare.system.repository.model.Keys;
import vn.mcare.system.repository.model.ThangvtmMcare;
import vn.mcare.system.repository.model.tables.records.AdminRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Admin extends TableImpl<AdminRecord> {

    private static final long serialVersionUID = -1527167701;

    /**
     * The reference instance of <code>thangvtm_mcare.admin</code>
     */
    public static final Admin ADMIN = new Admin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminRecord> getRecordType() {
        return AdminRecord.class;
    }

    /**
     * The column <code>thangvtm_mcare.admin.cif</code>.
     */
    public final TableField<AdminRecord, String> CIF = createField(DSL.name("cif"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>thangvtm_mcare.admin.email</code>.
     */
    public final TableField<AdminRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>thangvtm_mcare.admin.password</code>.
     */
    public final TableField<AdminRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>thangvtm_mcare.admin.salt</code>.
     */
    public final TableField<AdminRecord, String> SALT = createField(DSL.name("salt"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>thangvtm_mcare.admin.full_name</code>.
     */
    public final TableField<AdminRecord, String> FULL_NAME = createField(DSL.name("full_name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>thangvtm_mcare.admin.description</code>.
     */
    public final TableField<AdminRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>thangvtm_mcare.admin.last_login</code>.
     */
    public final TableField<AdminRecord, LocalDateTime> LAST_LOGIN = createField(DSL.name("last_login"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>thangvtm_mcare.admin.created_at</code>.
     */
    public final TableField<AdminRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>thangvtm_mcare.admin.modified_at</code>.
     */
    public final TableField<AdminRecord, LocalDateTime> MODIFIED_AT = createField(DSL.name("modified_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>thangvtm_mcare.admin</code> table reference
     */
    public Admin() {
        this(DSL.name("admin"), null);
    }

    /**
     * Create an aliased <code>thangvtm_mcare.admin</code> table reference
     */
    public Admin(String alias) {
        this(DSL.name(alias), ADMIN);
    }

    /**
     * Create an aliased <code>thangvtm_mcare.admin</code> table reference
     */
    public Admin(Name alias) {
        this(alias, ADMIN);
    }

    private Admin(Name alias, Table<AdminRecord> aliased) {
        this(alias, aliased, null);
    }

    private Admin(Name alias, Table<AdminRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Admin(Table<O> child, ForeignKey<O, AdminRecord> key) {
        super(child, key, ADMIN);
    }

    @Override
    public Schema getSchema() {
        return ThangvtmMcare.THANGVTM_MCARE;
    }

    @Override
    public UniqueKey<AdminRecord> getPrimaryKey() {
        return Keys.KEY_ADMIN_PRIMARY;
    }

    @Override
    public List<UniqueKey<AdminRecord>> getKeys() {
        return Arrays.<UniqueKey<AdminRecord>>asList(Keys.KEY_ADMIN_PRIMARY);
    }

    @Override
    public Admin as(String alias) {
        return new Admin(DSL.name(alias), this);
    }

    @Override
    public Admin as(Name alias) {
        return new Admin(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Admin rename(String name) {
        return new Admin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Admin rename(Name name) {
        return new Admin(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, String, String, String, String, String, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
